# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyspot', [dirname(__file__)])
        except ImportError:
            import _pyspot
            return _pyspot
        if fp is not None:
            try:
                _mod = imp.load_module('_pyspot', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyspot = swig_import_helper()
    del swig_import_helper
else:
    import _pyspot
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyspot.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _pyspot.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pyspot.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pyspot.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pyspot.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pyspot.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _pyspot.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pyspot.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pyspot.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pyspot.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pyspot.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pyspot.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pyspot.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pyspot.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pyspot.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pyspot.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pyspot.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyspot.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(DoubleVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector___bool__(self)


    def __len__(self):
        """
        __len__(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _pyspot.DoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _pyspot.DoubleVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _pyspot.DoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _pyspot.DoubleVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _pyspot.DoubleVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _pyspot.DoubleVector___setitem__(self, *args)


    def pop(self):
        """
        pop(DoubleVector self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_pop(self)


    def append(self, x):
        """
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _pyspot.DoubleVector_append(self, x)


    def empty(self):
        """
        empty(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector_empty(self)


    def size(self):
        """
        size(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector_size(self)


    def swap(self, v):
        """
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _pyspot.DoubleVector_swap(self, v)


    def begin(self):
        """
        begin(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_begin(self)


    def end(self):
        """
        end(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_end(self)


    def rbegin(self):
        """
        rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_rbegin(self)


    def rend(self):
        """
        rend(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_rend(self)


    def clear(self):
        """
        clear(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(DoubleVector self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _pyspot.DoubleVector_pop_back(self)


    def erase(self, *args):
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _pyspot.DoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _pyspot.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _pyspot.DoubleVector_push_back(self, x)


    def front(self):
        """
        front(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector_front(self)


    def back(self):
        """
        back(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector_back(self)


    def assign(self, n, x):
        """
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _pyspot.DoubleVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _pyspot.DoubleVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _pyspot.DoubleVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _pyspot.DoubleVector_reserve(self, n)


    def capacity(self):
        """
        capacity(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _pyspot.DoubleVector_capacity(self)

    __swig_destroy__ = _pyspot.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pyspot.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class Ubend(DoubleVector):
    """


    This container is a kind of circular vector.  

    First it is empty. Then we feed it with data until its max capacity is reached
    (transitory state). When it is full, the earlier data erase the older one
    (cruise state).  

    C++ includes: ubend.h

    """

    __swig_setmethods__ = {}
    for _s in [DoubleVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ubend, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ubend, name)
    __repr__ = _swig_repr

    def __init__(self, N=-1):
        """
        __init__(Ubend self, int N=-1) -> Ubend

        Parameters
        ----------
        N: int

        __init__(Ubend self) -> Ubend



        Basic Ubend constructor.  

        Parameters
        ----------
        * `N` :  
            the maximum size of the container (capacity)  

        Returns
        -------
        a Ubend object  

        """
        this = _pyspot.new_Ubend(N)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def merge(self, U):
        """
        merge(Ubend self, Ubend U) -> Ubend

        Parameters
        ----------
        U: Ubend const &




        Merge two Ubend instances (take half data in each instance)  

        Returns
        -------
        A new Ubend object  

        """
        return _pyspot.Ubend_merge(self, U)


    def getCursor(self):
        """
        getCursor(Ubend self) -> int

        Parameters
        ----------
        self: Ubend *




        Get the value of the cursor, so the next block to fill.  

        Returns
        -------
        the current cursor  

        """
        return _pyspot.Ubend_getCursor(self)


    def getLastErasedData(self):
        """
        getLastErasedData(Ubend self) -> double

        Parameters
        ----------
        self: Ubend *




        Get the value of the last erased data.  

        Returns
        -------
        the last erased data  

        """
        return _pyspot.Ubend_getLastErasedData(self)


    def getCapacity(self):
        """
        getCapacity(Ubend self) -> int

        Parameters
        ----------
        self: Ubend *




        Get the capacity of the container (its max size)  

        Returns
        -------
        the capacity  

        """
        return _pyspot.Ubend_getCapacity(self)


    def isFilled(self):
        """
        isFilled(Ubend self) -> bool

        Parameters
        ----------
        self: Ubend *




        Get the fill state of the container.  

        Returns
        -------
        True if the capacity is reached (False otherwise)  

        """
        return _pyspot.Ubend_isFilled(self)


    def push(self, x):
        """
        push(Ubend self, double x) -> int

        Parameters
        ----------
        x: double




        Feed the container with a new value.  

        Parameters
        ----------
        * `A` :  
            new value to store  

        Returns
        -------
        the state of the container  

        Returns
        -------
        * `-1` :  
            The Ubend is not filled yet  
        * `0` :  
            The Ubend is just filled  
        * `1` :  
            Cruising case  

        """
        return _pyspot.Ubend_push(self, x)

    __swig_destroy__ = _pyspot.delete_Ubend
    __del__ = lambda self: None
Ubend_swigregister = _pyspot.Ubend_swigregister
Ubend_swigregister(Ubend)

class StreamStats(_object):
    """


    Compute specific statistics over streaming data.  

    This class compute s* which is the best axis splitting the data into two modes
    and the B2 statistics which uses s* to estimates the unimodality of the
    distribution of the incoming data  

    C++ includes: streamstats.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamStats, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StreamStats self, int size=100) -> StreamStats

        Parameters
        ----------
        size: int

        __init__(StreamStats self) -> StreamStats
        __init__(StreamStats self, int size, DoubleVector v, bool center=False) -> StreamStats

        Parameters
        ----------
        size: int
        v: std::vector< double >
        center: bool

        __init__(StreamStats self, int size, DoubleVector v) -> StreamStats

        Parameters
        ----------
        size: int
        v: std::vector< double >




        Basic constructor with a first batch of data.  

        Parameters
        ----------
        * `size` :  
            The window size where the mean is computed (-1 for infinite window)  
        * `v` :  
            An initial batch of data  
        * `center` :  
            If true, remove the mean from the initial batch  

        Returns
        -------
        A StreamStats object  

        """
        this = _pyspot.new_StreamStats(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def merge(self, S):
        """
        merge(StreamStats self, StreamStats S) -> StreamStats

        Parameters
        ----------
        S: StreamStats const &




        Merge two StreamStats objects.  

        It takes half data in each StreamStats  

        Parameters
        ----------
        * `S` :  
            Another StreamStats instance  

        Returns
        -------
        A new StreamStats object  

        """
        return _pyspot.StreamStats_merge(self, S)


    def get_s_star(self):
        """
        get_s_star(StreamStats self) -> double

        Parameters
        ----------
        self: StreamStats *




        Return the best symmetry axis s*.  

        """
        return _pyspot.StreamStats_get_s_star(self)


    def size(self):
        """
        size(StreamStats self) -> int

        Parameters
        ----------
        self: StreamStats *




        Return the number of stored data.  

        """
        return _pyspot.StreamStats_size(self)


    def B2(self):
        """
        B2(StreamStats self) -> double

        Parameters
        ----------
        self: StreamStats *




        Compute and return the B2 statistics.  

        """
        return _pyspot.StreamStats_B2(self)


    def H2(self):
        """
        H2(StreamStats self) -> double

        Parameters
        ----------
        self: StreamStats *




        Compute and return the H2 statistics.  

        """
        return _pyspot.StreamStats_H2(self)


    def step(self, x):
        """
        step(StreamStats self, double x) -> int

        Parameters
        ----------
        x: double




        Update the statistics with a new incoming data.  

        Parameters
        ----------
        * `x` :  
            New incoming data  

        Returns
        -------
        The state of the Ubend container (see the Ubend class)  

        """
        return _pyspot.StreamStats_step(self, x)


    def __lt__(self, other):
        """
        __lt__(StreamStats self, StreamStats other) -> bool

        Parameters
        ----------
        other: StreamStats &

        """
        return _pyspot.StreamStats___lt__(self, other)


    def dump(self):
        """
        dump(StreamStats self) -> DoubleVector

        Parameters
        ----------
        self: StreamStats *




        Return a copy of the underlying vector.  

        """
        return _pyspot.StreamStats_dump(self)


    def stringStatus(self):
        """
        stringStatus(StreamStats self) -> std::string

        Parameters
        ----------
        self: StreamStats *




        Return a string which summarizes the current status of the object.  

        """
        return _pyspot.StreamStats_stringStatus(self)

    __swig_destroy__ = _pyspot.delete_StreamStats
    __del__ = lambda self: None
StreamStats_swigregister = _pyspot.StreamStats_swigregister
StreamStats_swigregister(StreamStats)

class Bounds(_object):
    """


    A structure which embeds upper and lower thresholds.  

    Some basic methods are also implemented ------|------------|------- down up  

    C++ includes: bounds.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bounds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bounds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["down"] = _pyspot.Bounds_down_set
    __swig_getmethods__["down"] = _pyspot.Bounds_down_get
    if _newclass:
        down = _swig_property(_pyspot.Bounds_down_get, _pyspot.Bounds_down_set)
    __swig_setmethods__["up"] = _pyspot.Bounds_up_set
    __swig_getmethods__["up"] = _pyspot.Bounds_up_get
    if _newclass:
        up = _swig_property(_pyspot.Bounds_up_get, _pyspot.Bounds_up_set)

    def __init__(self, d=0.0, u=0.0):
        """
        __init__(Bounds self, double d=0.0, double u=0.0) -> Bounds

        Parameters
        ----------
        d: double
        u: double

        __init__(Bounds self, double d=0.0) -> Bounds

        Parameters
        ----------
        d: double

        __init__(Bounds self) -> Bounds



        Basic constructor.  

        Parameters
        ----------
        * `d` :  
            the value of the lower bounds  
        * `u` :  
            the value of the upper bounds  

        Returns
        -------
        GPDfit object  

        """
        this = _pyspot.new_Bounds(d, u)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def distanceTo(self, x):
        """
        distanceTo(Bounds self, double x) -> double

        Parameters
        ----------
        x: double




        Compute the distance between a value x and the interval [down,up].  

        If x belongs to [down,up], it returns 0. Otherwises it returns d(x) =
        min(|x-down|,|x-up|)  

        Parameters
        ----------
        * `x` :  
            a value  

        Returns
        -------
        the distance d(x)  

        """
        return _pyspot.Bounds_distanceTo(self, x)


    def contains(self, x):
        """
        contains(Bounds self, double x) -> bool

        Parameters
        ----------
        x: double




        Check if a value x belongs to the interval [down,up].  

        Returns
        -------
        * `true` :  
            x belongs to the interval [down,up]  
        * `false` :  
            x does not belong to the interval [down,up]  

        """
        return _pyspot.Bounds_contains(self, x)


    def __lt__(self, other):
        """
        __lt__(Bounds self, Bounds other) -> bool

        Parameters
        ----------
        other: Bounds const &

        """
        return _pyspot.Bounds___lt__(self, other)


    def __gt__(self, other):
        """
        __gt__(Bounds self, Bounds other) -> bool

        Parameters
        ----------
        other: Bounds const &

        """
        return _pyspot.Bounds___gt__(self, other)

    __swig_destroy__ = _pyspot.delete_Bounds
    __del__ = lambda self: None
Bounds_swigregister = _pyspot.Bounds_swigregister
Bounds_swigregister(Bounds)


def brent(found, a, b, f, epsilon=1e-6, delta=1e-8):
    """
    brent(bool * found, double a, double b, function< double (double) > f, double epsilon=1e-6, double delta=1e-8) -> double

    Parameters
    ----------
    found: bool *
    a: double
    b: double
    f: function< double (double) >
    epsilon: double
    delta: double

    brent(bool * found, double a, double b, function< double (double) > f, double epsilon=1e-6) -> double

    Parameters
    ----------
    found: bool *
    a: double
    b: double
    f: function< double (double) >
    epsilon: double

    brent(bool * found, double a, double b, function< double (double) > f) -> double

    Parameters
    ----------
    found: bool *
    a: double
    b: double
    f: function< double (double) >




    Root search of a scalar function with the Brent's method.  

    Parameters
    ----------
    * `found` :  
        pointer to retrieve the success of the method  
    * `a` :  
        left bound of the interval  
    * `b` :  
        right bound of the interval  
    * `f` :  
        function of interest  
    * `epsilon` :  
        extra parameter  
    * `delta` :  
        extra parameter  

    Returns
    -------
    root  

    """
    return _pyspot.brent(found, a, b, f, epsilon, delta)
class GPDinfo(_object):
    """


    The GPDinfo structure.  

    This structure gathers the information about a GPD fit (parameters + log-
    likelihood)  

    C++ includes: gpdfit.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPDinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPDinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gamma"] = _pyspot.GPDinfo_gamma_set
    __swig_getmethods__["gamma"] = _pyspot.GPDinfo_gamma_get
    if _newclass:
        gamma = _swig_property(_pyspot.GPDinfo_gamma_get, _pyspot.GPDinfo_gamma_set)
    __swig_setmethods__["sigma"] = _pyspot.GPDinfo_sigma_set
    __swig_getmethods__["sigma"] = _pyspot.GPDinfo_sigma_get
    if _newclass:
        sigma = _swig_property(_pyspot.GPDinfo_sigma_get, _pyspot.GPDinfo_sigma_set)
    __swig_setmethods__["llhood"] = _pyspot.GPDinfo_llhood_set
    __swig_getmethods__["llhood"] = _pyspot.GPDinfo_llhood_get
    if _newclass:
        llhood = _swig_property(_pyspot.GPDinfo_llhood_get, _pyspot.GPDinfo_llhood_set)

    def __init__(self):
        """
        __init__(GPDinfo self) -> GPDinfo



        The GPDinfo structure.  

        This structure gathers the information about a GPD fit (parameters + log-
        likelihood)  

        C++ includes: gpdfit.h

        """
        this = _pyspot.new_GPDinfo()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyspot.delete_GPDinfo
    __del__ = lambda self: None
GPDinfo_swigregister = _pyspot.GPDinfo_swigregister
GPDinfo_swigregister(GPDinfo)

class GPDfit(Ubend):
    """


    This class implement the Generalized Pareto Distribution fit given some data.  

    This class is based on the Ubend structure. It performs maximum likelihood
    estimation of the GPD parameters with the Grimshaw's trick  

    C++ includes: gpdfit.h

    """

    __swig_setmethods__ = {}
    for _s in [Ubend]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPDfit, name, value)
    __swig_getmethods__ = {}
    for _s in [Ubend]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPDfit, name)
    __repr__ = _swig_repr

    def __init__(self, capacity=-1):
        """
        __init__(GPDfit self, int capacity=-1) -> GPDfit

        Parameters
        ----------
        capacity: int

        __init__(GPDfit self) -> GPDfit



        Constructor.  

        Parameters
        ----------
        * `size_max` :  
            maximum number of values to store  

        Returns
        -------
        GPDfit object  

        """
        this = _pyspot.new_GPDfit(capacity)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def min(self):
        """
        min(GPDfit self) -> double

        Parameters
        ----------
        self: GPDfit *




        Get the minimum value of stored data.  

        """
        return _pyspot.GPDfit_min(self)


    def max(self):
        """
        max(GPDfit self) -> double

        Parameters
        ----------
        self: GPDfit *




        Get the maximum value of stored data.  

        """
        return _pyspot.GPDfit_max(self)


    def mean(self):
        """
        mean(GPDfit self) -> double

        Parameters
        ----------
        self: GPDfit *




        Get the mean of stored data.  

        """
        return _pyspot.GPDfit_mean(self)


    def grimshaw_w(self, x):
        """
        grimshaw_w(GPDfit self, double x) -> double

        Parameters
        ----------
        x: double




        Auxiliary function to compute the likelihood.  

        Parameters
        ----------
        * `x` :  
            the antecedent  

        Returns
        -------
        w(x) = u(x)v(x) - 1  

        """
        return _pyspot.GPDfit_grimshaw_w(self, x)


    def fit(self):
        """
        fit(GPDfit self) -> GPDinfo

        Parameters
        ----------
        self: GPDfit *




        Perform a GPD fit of the stored excesses.  

        Returns
        -------
        GPDinfo object gathering gamma, sigma and the likelihood  

        """
        return _pyspot.GPDfit_fit(self)

    __swig_destroy__ = _pyspot.delete_GPDfit
    __del__ = lambda self: None
GPDfit_swigregister = _pyspot.GPDfit_swigregister
GPDfit_swigregister(GPDfit)

class SpotStatus(_object):
    """


    This structure summarizes the status of the Spot object around the decision
    area.  

    It gives the number of excesses, the number of alarms, the number of normal
    observations, the values of the thresholds etc.  

    C++ includes: spot.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpotStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpotStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _pyspot.SpotStatus_n_set
    __swig_getmethods__["n"] = _pyspot.SpotStatus_n_get
    if _newclass:
        n = _swig_property(_pyspot.SpotStatus_n_get, _pyspot.SpotStatus_n_set)
    __swig_setmethods__["Nt_up"] = _pyspot.SpotStatus_Nt_up_set
    __swig_getmethods__["Nt_up"] = _pyspot.SpotStatus_Nt_up_get
    if _newclass:
        Nt_up = _swig_property(_pyspot.SpotStatus_Nt_up_get, _pyspot.SpotStatus_Nt_up_set)
    __swig_setmethods__["Nt_down"] = _pyspot.SpotStatus_Nt_down_set
    __swig_getmethods__["Nt_down"] = _pyspot.SpotStatus_Nt_down_get
    if _newclass:
        Nt_down = _swig_property(_pyspot.SpotStatus_Nt_down_get, _pyspot.SpotStatus_Nt_down_set)
    __swig_setmethods__["ex_up"] = _pyspot.SpotStatus_ex_up_set
    __swig_getmethods__["ex_up"] = _pyspot.SpotStatus_ex_up_get
    if _newclass:
        ex_up = _swig_property(_pyspot.SpotStatus_ex_up_get, _pyspot.SpotStatus_ex_up_set)
    __swig_setmethods__["ex_down"] = _pyspot.SpotStatus_ex_down_set
    __swig_getmethods__["ex_down"] = _pyspot.SpotStatus_ex_down_get
    if _newclass:
        ex_down = _swig_property(_pyspot.SpotStatus_ex_down_get, _pyspot.SpotStatus_ex_down_set)
    __swig_setmethods__["al_up"] = _pyspot.SpotStatus_al_up_set
    __swig_getmethods__["al_up"] = _pyspot.SpotStatus_al_up_get
    if _newclass:
        al_up = _swig_property(_pyspot.SpotStatus_al_up_get, _pyspot.SpotStatus_al_up_set)
    __swig_setmethods__["al_down"] = _pyspot.SpotStatus_al_down_set
    __swig_getmethods__["al_down"] = _pyspot.SpotStatus_al_down_get
    if _newclass:
        al_down = _swig_property(_pyspot.SpotStatus_al_down_get, _pyspot.SpotStatus_al_down_set)
    __swig_setmethods__["t_up"] = _pyspot.SpotStatus_t_up_set
    __swig_getmethods__["t_up"] = _pyspot.SpotStatus_t_up_get
    if _newclass:
        t_up = _swig_property(_pyspot.SpotStatus_t_up_get, _pyspot.SpotStatus_t_up_set)
    __swig_setmethods__["t_down"] = _pyspot.SpotStatus_t_down_set
    __swig_getmethods__["t_down"] = _pyspot.SpotStatus_t_down_get
    if _newclass:
        t_down = _swig_property(_pyspot.SpotStatus_t_down_get, _pyspot.SpotStatus_t_down_set)
    __swig_setmethods__["z_up"] = _pyspot.SpotStatus_z_up_set
    __swig_getmethods__["z_up"] = _pyspot.SpotStatus_z_up_get
    if _newclass:
        z_up = _swig_property(_pyspot.SpotStatus_z_up_get, _pyspot.SpotStatus_z_up_set)
    __swig_setmethods__["z_down"] = _pyspot.SpotStatus_z_down_set
    __swig_getmethods__["z_down"] = _pyspot.SpotStatus_z_down_get
    if _newclass:
        z_down = _swig_property(_pyspot.SpotStatus_z_down_get, _pyspot.SpotStatus_z_down_set)

    def str(self):
        """
        str(SpotStatus self) -> std::string

        Parameters
        ----------
        self: SpotStatus *




        Format the status to print it.  

        """
        return _pyspot.SpotStatus_str(self)


    def __init__(self):
        """
        __init__(SpotStatus self) -> SpotStatus



        This structure summarizes the status of the Spot object around the decision
        area.  

        It gives the number of excesses, the number of alarms, the number of normal
        observations, the values of the thresholds etc.  

        C++ includes: spot.h

        """
        this = _pyspot.new_SpotStatus()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyspot.delete_SpotStatus
    __del__ = lambda self: None
SpotStatus_swigregister = _pyspot.SpotStatus_swigregister
SpotStatus_swigregister(SpotStatus)

class SpotConfig(_object):
    """


    This structure gathers the configuration of a Spot object (aims to build similar
    instance)  

    C++ includes: spot.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpotConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpotConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["q"] = _pyspot.SpotConfig_q_set
    __swig_getmethods__["q"] = _pyspot.SpotConfig_q_get
    if _newclass:
        q = _swig_property(_pyspot.SpotConfig_q_get, _pyspot.SpotConfig_q_set)
    __swig_setmethods__["bounded"] = _pyspot.SpotConfig_bounded_set
    __swig_getmethods__["bounded"] = _pyspot.SpotConfig_bounded_get
    if _newclass:
        bounded = _swig_property(_pyspot.SpotConfig_bounded_get, _pyspot.SpotConfig_bounded_set)
    __swig_setmethods__["max_excess"] = _pyspot.SpotConfig_max_excess_set
    __swig_getmethods__["max_excess"] = _pyspot.SpotConfig_max_excess_get
    if _newclass:
        max_excess = _swig_property(_pyspot.SpotConfig_max_excess_get, _pyspot.SpotConfig_max_excess_set)
    __swig_setmethods__["alert"] = _pyspot.SpotConfig_alert_set
    __swig_getmethods__["alert"] = _pyspot.SpotConfig_alert_get
    if _newclass:
        alert = _swig_property(_pyspot.SpotConfig_alert_get, _pyspot.SpotConfig_alert_set)
    __swig_setmethods__["up"] = _pyspot.SpotConfig_up_set
    __swig_getmethods__["up"] = _pyspot.SpotConfig_up_get
    if _newclass:
        up = _swig_property(_pyspot.SpotConfig_up_get, _pyspot.SpotConfig_up_set)
    __swig_setmethods__["down"] = _pyspot.SpotConfig_down_set
    __swig_getmethods__["down"] = _pyspot.SpotConfig_down_get
    if _newclass:
        down = _swig_property(_pyspot.SpotConfig_down_get, _pyspot.SpotConfig_down_set)
    __swig_setmethods__["n_init"] = _pyspot.SpotConfig_n_init_set
    __swig_getmethods__["n_init"] = _pyspot.SpotConfig_n_init_get
    if _newclass:
        n_init = _swig_property(_pyspot.SpotConfig_n_init_get, _pyspot.SpotConfig_n_init_set)
    __swig_setmethods__["level"] = _pyspot.SpotConfig_level_set
    __swig_getmethods__["level"] = _pyspot.SpotConfig_level_get
    if _newclass:
        level = _swig_property(_pyspot.SpotConfig_level_get, _pyspot.SpotConfig_level_set)

    def str(self):
        """
        str(SpotConfig self) -> std::string

        Parameters
        ----------
        self: SpotConfig *




        Format the config to print it.  

        """
        return _pyspot.SpotConfig_str(self)


    def __init__(self):
        """
        __init__(SpotConfig self) -> SpotConfig



        This structure gathers the configuration of a Spot object (aims to build similar
        instance)  

        C++ includes: spot.h

        """
        this = _pyspot.new_SpotConfig()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyspot.delete_SpotConfig
    __del__ = lambda self: None
SpotConfig_swigregister = _pyspot.SpotConfig_swigregister
SpotConfig_swigregister(SpotConfig)

class Spot(_object):
    """


    Embed the Spot algorithm to flag outliers in streaming data.  

    This object computes probabilistic upper and lower bounds (as desired) according
    to the incoming data and the main parameter q  

    C++ includes: spot.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Spot self, double q=1e-3, int n_init=1000) -> Spot

        Parameters
        ----------
        q: double
        n_init: int

        __init__(Spot self, double q=1e-3) -> Spot

        Parameters
        ----------
        q: double

        __init__(Spot self) -> Spot
        __init__(Spot self, double q, DoubleVector init_data) -> Spot

        Parameters
        ----------
        q: double
        init_data: std::vector< double >

        __init__(Spot self, double q, int n_init, double level, bool up, bool down, bool alert, bool bounded, int max_excess) -> Spot

        Parameters
        ----------
        q: double
        n_init: int
        level: double
        up: bool
        down: bool
        alert: bool
        bounded: bool
        max_excess: int

        __init__(Spot self, double q, DoubleVector init_data, double level, bool up, bool down, bool alert, bool bounded, int max_excess) -> Spot

        Parameters
        ----------
        q: double
        init_data: std::vector< double >
        level: double
        up: bool
        down: bool
        alert: bool
        bounded: bool
        max_excess: int

        __init__(Spot self, SpotConfig conf) -> Spot

        Parameters
        ----------
        conf: SpotConfig




        create a Spot object according to the configuration  

        Parameters
        ----------
        * `conf` :  
            a SpotConfig object  

        Returns
        -------
        Spot object  

        """
        this = _pyspot.new_Spot(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __eq__(self, spot):
        """
        __eq__(Spot self, Spot spot) -> bool

        Parameters
        ----------
        spot: Spot const &

        """
        return _pyspot.Spot___eq__(self, spot)


    def __add__(self, spot):
        """
        __add__(Spot self, Spot spot) -> Spot

        Parameters
        ----------
        spot: Spot const &

        """
        return _pyspot.Spot___add__(self, spot)


    def step(self, v):
        """
        step(Spot self, double v) -> int

        Parameters
        ----------
        v: double




        Spot iteration.  

        Parameters
        ----------
        * `v` :  
            input data  

        Returns
        -------
        The nature of the input data  

        Returns
        -------
        * `0` :  
            Normal data  
        * `1` :  
            Up alert  
        * `-1` :  
            Down alert  
        * `2` :  
            Up excess  
        * `-2` :  
            Down excess  
        * `3` :  
            to initial batch  
        * `4` :  
            calibration step  

        """
        return _pyspot.Spot_step(self, v)


    def calibrate(self):
        """
        calibrate(Spot self)

        Parameters
        ----------
        self: Spot *




        Perform Spot initial calibration (after the first n_init observations)  

        """
        return _pyspot.Spot_calibrate(self)


    def status(self):
        """
        status(Spot self) -> SpotStatus

        Parameters
        ----------
        self: Spot *




        Get the internal state of the Spot instance.  

        """
        return _pyspot.Spot_status(self)


    def stringStatus(self):
        """
        stringStatus(Spot self) -> std::string

        Parameters
        ----------
        self: Spot *




        Get the internal state of the Spot instance (display-ready)  

        """
        return _pyspot.Spot_stringStatus(self)


    def config(self):
        """
        config(Spot self) -> SpotConfig

        Parameters
        ----------
        self: Spot const *




        """
        return _pyspot.Spot_config(self)


    def getUpperThreshold(self):
        """
        getUpperThreshold(Spot self) -> double

        Parameters
        ----------
        self: Spot *




        Get the current upper threshold.  

        """
        return _pyspot.Spot_getUpperThreshold(self)


    def getLowerThreshold(self):
        """
        getLowerThreshold(Spot self) -> double

        Parameters
        ----------
        self: Spot *




        Get the current lower threshold.  

        """
        return _pyspot.Spot_getLowerThreshold(self)


    def getThresholds(self):
        """
        getThresholds(Spot self) -> Bounds

        Parameters
        ----------
        self: Spot *




        Get the current thresholds (through a Bounds structure)  

        """
        return _pyspot.Spot_getThresholds(self)


    def getUpper_t(self):
        """
        getUpper_t(Spot self) -> double

        Parameters
        ----------
        self: Spot *




        Get the upper excess quantile.  

        """
        return _pyspot.Spot_getUpper_t(self)


    def getLower_t(self):
        """
        getLower_t(Spot self) -> double

        Parameters
        ----------
        self: Spot *




        Get the lower excess quantile.  

        """
        return _pyspot.Spot_getLower_t(self)

    __swig_destroy__ = _pyspot.delete_Spot
    __del__ = lambda self: None
Spot_swigregister = _pyspot.Spot_swigregister
Spot_swigregister(Spot)

class DSpot(Spot):
    """


    Embed the DSpot algorithm to flag outliers in streaming and drifting data.  

    This object computes probabilistic upper and lower bounds (as desired) according
    to the incoming data, the main parameter q and the local drift (a moving average
    with a given depth)  

    C++ includes: dspot.h

    """

    __swig_setmethods__ = {}
    for _s in [Spot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSpot, name, value)
    __swig_getmethods__ = {}
    for _s in [Spot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSpot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DSpot self, int d=10, double q=1e-3, int n_init=1000) -> DSpot

        Parameters
        ----------
        d: int
        q: double
        n_init: int

        __init__(DSpot self, int d=10, double q=1e-3) -> DSpot

        Parameters
        ----------
        d: int
        q: double

        __init__(DSpot self, int d=10) -> DSpot

        Parameters
        ----------
        d: int

        __init__(DSpot self) -> DSpot
        __init__(DSpot self, int d, double q, DoubleVector init_data) -> DSpot

        Parameters
        ----------
        d: int
        q: double
        init_data: std::vector< double >

        __init__(DSpot self, int d, double q, int n_init, double level, bool up, bool down, bool alert, bool bounded, int max_excess) -> DSpot

        Parameters
        ----------
        d: int
        q: double
        n_init: int
        level: double
        up: bool
        down: bool
        alert: bool
        bounded: bool
        max_excess: int

        __init__(DSpot self, int d, double q, DoubleVector init_data, double level, bool up, bool down, bool alert, bool bounded, int max_excess) -> DSpot

        Parameters
        ----------
        d: int
        q: double
        init_data: std::vector< double >
        level: double
        up: bool
        down: bool
        alert: bool
        bounded: bool
        max_excess: int




        """
        this = _pyspot.new_DSpot(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __eq__(self, other):
        """
        __eq__(DSpot self, DSpot other) -> bool

        Parameters
        ----------
        other: DSpot const &

        """
        return _pyspot.DSpot___eq__(self, other)


    def __lt__(self, other):
        """
        __lt__(DSpot self, DSpot other) -> bool

        Parameters
        ----------
        other: DSpot const &

        """
        return _pyspot.DSpot___lt__(self, other)


    def step(self, x):
        """
        step(DSpot self, double x) -> int

        Parameters
        ----------
        x: double




        Spot iteration.  

        Parameters
        ----------
        * `v` :  
            input data  

        Returns
        -------
        The nature of the input data  

        Returns
        -------
        * `0` :  
            Normal data  
        * `1` :  
            Up alert  
        * `-1` :  
            Down alert  
        * `2` :  
            Up excess  
        * `-2` :  
            Down excess  
        * `3` :  
            to initial batch  
        * `4` :  
            calibration step  

        """
        return _pyspot.DSpot_step(self, x)


    def getUpperThreshold(self):
        """
        getUpperThreshold(DSpot self) -> double

        Parameters
        ----------
        self: DSpot *




        Return the absolute upper threshold (with the drift)  

        """
        return _pyspot.DSpot_getUpperThreshold(self)


    def getLowerThreshold(self):
        """
        getLowerThreshold(DSpot self) -> double

        Parameters
        ----------
        self: DSpot *




        Return the absolute lower threshold (with the drift)  

        """
        return _pyspot.DSpot_getLowerThreshold(self)


    def getThresholds(self):
        """
        getThresholds(DSpot self) -> Bounds

        Parameters
        ----------
        self: DSpot *




        Return the absolute thresholds (with the drift)  

        """
        return _pyspot.DSpot_getThresholds(self)


    def getDrift(self):
        """
        getDrift(DSpot self) -> double

        Parameters
        ----------
        self: DSpot *




        Return the local drift.  

        """
        return _pyspot.DSpot_getDrift(self)


    def status(self):
        """
        status(DSpot self) -> SpotStatus

        Parameters
        ----------
        self: DSpot *




        Get the internal state of the DSpot instance.  

        """
        return _pyspot.DSpot_status(self)


    def stringStatus(self):
        """
        stringStatus(DSpot self) -> std::string

        Parameters
        ----------
        self: DSpot *




        Format the config to print it.  

        """
        return _pyspot.DSpot_stringStatus(self)

    __swig_destroy__ = _pyspot.delete_DSpot
    __del__ = lambda self: None
DSpot_swigregister = _pyspot.DSpot_swigregister
DSpot_swigregister(DSpot)

# This file is compatible with both classic and new-style classes.


